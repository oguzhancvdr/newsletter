from rest_framework import serializers
from news.models import Article, Reporter

from datetime import datetime, date
from django.utils.timesince import timesince



class ArticleSerializer(serializers.ModelSerializer):
    # burda kullanıcının postu yayınladığı andan itibaren geçtiği süreyi
    # hesaplayıp cliente dönelim
    # methodumuzu tanımlıyoruz
    time_since_pub = serializers.SerializerMethodField()
    # we can show definion in __str__ method our related tables 
    # using StringRelatedField()
    # but it has drawbacks in the crud process for example.
    # author = serializers.StringRelatedField()
    # but we can show all information about reporter;
    # 1. create ReporterSerializer
    # second assing here
    # author = ReporterSerializer()
    # but in this case we can not create any article 
    # because we need to  create first author
    # so we moved our ReporterSerializer below and implement logic

    class Meta:
        model = Article
        fields = '__all__'

    # put prefix get_ your defined SerializerMethodFiedl()
    # we need to send object to our model to be able to create time_since_pub field and its value
    # our method
    def get_time_since_pub(self, object):
        now = datetime.now()
        pub_date = object.pub_date
        if object.is_active:
            time_delta = timesince(pub_date, now)
            return time_delta
        else:
            return 'Not Active'

    def validate_pub_date(self, value):
        today = date.today()
        if value > today:
            raise serializers.ValidationError('Publish date cannot be a further date!')
        return value
        
# if we move this serializer after Article
# our server will be down, because we assing this serializer inside ArticleSerialzer
# so it has'nt been readed and throws broken page
class ReporterSerializer(serializers.ModelSerializer):
    # we take queryset below definition not instance 
    # thus we need define many=True
    # by assinging read_only true when we create an author don't create any articles
    # article_set is related_name between related fields
    # it is generated by django like "modelname_set"
    # in this case my model Article and its related name article_set
    # i can reach article information because my Reporter and Article has O-2-M relation
    # article_set = ArticleSerializer(many=True, read_only=True)
    # but what if this reporter many article ? it can be big data
    # so HyperlinkedRelatedField comes our help
    # it creates endpoints as a hyper link for each article

    article_set = serializers.HyperlinkedRelatedField(
        many=True,
        read_only=True,
        # view_name of article details check api/urls.py name= field
        view_name="article-detail",
    )
    class Meta:
        model = Reporter
        fields = '__all__'





# Standart Serializer
class ArticleDefaultSerializer(serializers.Serializer):
    id = serializers.IntegerField(read_only=True)
    author = serializers.CharField()
    headline = serializers.CharField()
    description = serializers.CharField()
    content = serializers.CharField()
    city = serializers.CharField()
    pub_date = serializers.DateField()
    is_active = serializers.BooleanField()
    created_at = serializers.DateTimeField(read_only=True)
    modified_at = serializers.DateTimeField(read_only=True)

    def create(self, validated_data):
        print(validated_data)
        # validated_data is an dictonary so we need to open key value pairs with 2 asterix
        return Article.objects.create(**validated_data)

    # we send object to client in update so we need to take that object
    # will ne updated as an argument (instance)
    def update(self, instance, validated_data):
        # we don't need to deal with id, created_at and updated_At
        # because our db is already handling with this field
        # so we don't take that field 
        instance.author = validated_data.get('author', instance.author)
        instance.headline = validated_data.get('headline', instance.headline)
        instance.description = validated_data.get('description', instance.description)
        instance.content = validated_data.get('content', instance.content)
        instance.city = validated_data.get('city', instance.city)
        instance.pub_date = validated_data.get('pub_date', instance.pub_date)
        instance.is_active = validated_data.get('is_active', instance.is_active)
        instance.save()
        return instance
    
    def validate(self, data): # object level validation olduğu için dönen datayı kontrol ediyoruz
        # datamızda dictionary olduğu için aşağıdaki gibi ulaşabiliyorduk
        if data['headline'] == data['description']:
            raise serializers.ValidationError('Headline and description fields cannot be same')
        return data
    # fakat burda sadece field yani headline'ı çek ettiğimiz için valueyu almamız gerekir
    # field level validation
    def validate_description(self, value):
        if len(value) < 20:
            raise serializers.ValidationError(f'The description must be at least 20 characters bu given {len(value)} charecter')
        return value